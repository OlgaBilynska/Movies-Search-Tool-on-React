{"version":3,"file":"static/js/884.5eb6b7f2.chunk.js","mappings":"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","sources":["pages/MovieDetails.jsx","services/APIservices.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useState, useEffect, useRef, Suspense } from 'react';\nimport { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport { getMoviesAPI } from 'services/APIservices';\n\nconst movieAPI = getMoviesAPI();\n\nexport const MovieDetails = () => {\n  const [movie, setMovie] = useState('');\n\n  const { movieId } = useParams();\n\n  const location = useLocation();\n\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    movieAPI.getOneMovie(movieId).then(res => {\n      console.log('movie', res);\n      setMovie(res);\n    });\n  }, [movieId]);\n\n  const roundedRating = value => {\n    return value.toFixed(1);\n  };\n\n  const getYear = date => date.split('-')[0];\n\n  const { release_date } = movie;\n\n  return (\n    <>\n      <div> Movie Details</div>\n      <Link to={backLinkLocationRef.current}>Back to movies</Link>\n      <h1>\n        {' '}\n        {movie.original_title || movie.name} ({getYear(String(release_date))})\n      </h1>\n\n      <div>Rating: {roundedRating(Number(movie.vote_average))}</div>\n\n      {movie.poster_path && (\n        <img\n          src={`http://image.tmdb.org/t/p/w200${movie.poster_path}`}\n          alt={movie.original_title || movie.name}\n        />\n      )}\n\n      <h2>Overview</h2>\n      <div>{movie.overview}</div>\n      <h2>Genres</h2>\n      <ul>\n        {movie.genres &&\n          movie['genres'].map(genre => {\n            const genreId = nanoid();\n            return <li key={genreId}>{genre.name}</li>;\n          })}\n      </ul>\n      <ul>\n        <li key=\"cast\">\n          <Link to=\"cast\">Actors</Link>\n        </li>\n        <li key=\"reviews\">\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading the subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = '713e88f7db14c265e0543f2dd0843d0c';\n\nconst API_ENDPOINTS = {\n  baseURL: 'https://api.themoviedb.org/3/',\n  trending_URL: 'trending/all/day',\n  Movie_URL: 'search/movie',\n  Details_URL: 'movie/{movie_id}',\n  Actors_URL: 'movie/{movie_id}/credits',\n  Reviews_URL: 'movie/{movie_id}/reviews',\n};\n\naxios.defaults.baseURL = API_ENDPOINTS.baseURL;\n\nconst getTrendingMovies = async () => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.trending_URL, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getMovieBySearch = async query => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.Movie_URL, {\n      params: { api_key: API_KEY, language: 'en-US', query: query },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getOneMovie = async id => {\n  try {\n    const result = await axios.get(`movie/${id}`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find any information about this movie :(`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getActors = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/credits`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.cast;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find this actor.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/reviews`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure(`Sorry, no one has written a review yet.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getMoviesAPI = () => {\n  return {\n    getTrendingMovies,\n    getMovieBySearch,\n    getOneMovie,\n    getActors,\n    getReviews,\n  };\n};\n"],"names":["movieAPI","getMoviesAPI","MovieDetails","useState","movie","setMovie","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getOneMovie","then","res","console","log","value","date","release_date","to","current","original_title","name","String","split","Number","vote_average","toFixed","poster_path","src","alt","overview","genres","map","genre","genreId","nanoid","Suspense","fallback","API_KEY","API_ENDPOINTS","axios","getTrendingMovies","params","api_key","language","result","data","results","Notify","Error","response","message","getMovieBySearch","query","id","getActors","cast","getReviews"],"sourceRoot":""}