{"version":3,"file":"static/js/779.536e7d02.chunk.js","mappings":"2RAGaA,EAAkBC,EAAAA,EAAAA,GAAH,uGAMfC,EAAgBD,EAAAA,EAAAA,GAAH,uEAKbE,EAAaF,EAAAA,EAAAA,GAAH,gIASVG,GAAaH,EAAAA,EAAAA,GAAOI,EAAAA,IAAPJ,CAAH,4E,GAMMA,EAAAA,EAAAA,EAAH,sB,QCjBpBK,GAAYC,EAAAA,EAAAA,KAqClB,EAnCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRP,EAAUQ,WAAWH,GAASI,MAAK,SAAAC,GACd,IAAfA,EAAIC,QACNC,EAAAA,OAAAA,KAAA,kCAGFR,EAAWM,EACZ,GACF,GAAE,CAACL,IAEJ,IAAMQ,GAAMC,EAAAA,EAAAA,MAEZ,OACE,iCACE,SAAClB,EAAD,UAAe,2BACf,SAACF,EAAD,UACsB,IAAnBS,EAAQQ,QACP,yBAAK,qDAELR,EAAQY,KAAI,SAAAC,GAAM,OAChB,UAACnB,EAAD,YACE,SAACC,EAAD,KACC,SAACJ,EAAD,UAAkBsB,EAAOC,YAFXJ,EADD,QAU3B,C,4GC5CKK,EAAU,mCAEVC,EACK,gCADLA,EAEU,mBAFVA,EAGO,eAMbC,EAAAA,EAAAA,SAAAA,QAAyBD,EAEzB,IAAME,EAAiB,mCAAG,6GAEDD,EAAAA,EAAAA,IAAUD,EAA4B,CACzDG,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHlB,cAEhBC,EAFgB,yBAMfA,EAAOC,KAAKC,SANG,sCAQtBf,EAAAA,OAAAA,QAAe,kDACT,IAAIgB,MAAM,KAAMC,SAASH,KAAKI,SATd,yDAAH,qDAajBC,EAAgB,mCAAG,WAAMC,GAAN,gGAEAZ,EAAAA,EAAAA,IAAUD,EAAyB,CACtDG,OAAQ,CAAEC,QAASL,EAASM,SAAU,QAASQ,MAAOA,KAHnC,cAEfP,EAFe,yBAKdA,EAAOC,KAAKC,SALE,sCAOrBf,EAAAA,OAAAA,QAAe,kDACT,IAAIgB,MAAM,KAAMC,SAASH,KAAKI,SARf,yDAAH,sDAYhBG,EAAW,mCAAG,WAAMC,GAAN,gGAEKd,EAAAA,EAAAA,IAAA,gBAAmBc,GAAM,CAC5CZ,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHxB,cAEVC,EAFU,yBAKTA,EAAOC,MALE,sCAOhBd,EAAAA,OAAAA,QAAA,4DACM,IAAIgB,MAAM,KAAMC,SAASH,KAAKI,SARpB,yDAAH,sDAYXK,EAAS,mCAAG,WAAMD,GAAN,gGAEOd,EAAAA,EAAAA,IAAA,gBAAmBc,EAAnB,YAAiC,CACpDZ,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAH1B,cAERC,EAFQ,yBAKPA,EAAOC,KAAKU,MALL,sCAOdxB,EAAAA,OAAAA,QAAA,gEAGM,IAAIgB,MAAM,KAAMC,SAASH,KAAKI,SAVtB,yDAAH,sDAcTtB,EAAU,mCAAG,WAAM0B,GAAN,gGAEMd,EAAAA,EAAAA,IAAA,gBAAmBc,EAAnB,YAAiC,CACpDZ,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHzB,cAETC,EAFS,yBAKRA,EAAOC,KAAKC,SALJ,sCAOff,EAAAA,OAAAA,QAAA,2CACM,IAAIgB,MAAM,KAAMC,SAASH,KAAKI,SARrB,yDAAH,sDAYH7B,EAAe,WAC1B,MAAO,CACLoB,kBAAAA,EACAU,iBAAAA,EACAE,YAAAA,EACAE,UAAAA,EACA3B,WAAAA,EAEH,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/APIservices.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MdOutlineRateReview } from 'react-icons/md';\n\nexport const ReviewContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  /* align-items: flex-start; */\n`;\n\nexport const ReviewHeading = styled.h2`\n  margin-bottom: 30px;\n  text-align: center;\n`;\n\nexport const ReviewItem = styled.li`\n  text-align: start;\n  margin-bottom: 10px;\n\n  display: flex;\n  gap: 10px;\n  align-items: center;\n`;\n\nexport const ReviewIcon = styled(MdOutlineRateReview)`\n  width: 15px;\n  height: 15px;\n  min-width: 15%;\n`;\n\nexport const ReviewContent = styled.p``;\n","import { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMoviesAPI } from 'services/APIservices';\nimport {\n  ReviewHeading,\n  ReviewItem,\n  ReviewContainer,\n  ReviewIcon,\n} from './Reviews.styled';\n\nconst moviesAPI = getMoviesAPI();\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    moviesAPI.getReviews(movieId).then(res => {\n      if (res.length === 0) {\n        Notify.info(`Sorry, there're no reviews yet`);\n      }\n\n      setReviews(res);\n    });\n  }, [movieId]);\n\n  const idN = nanoid();\n\n  return (\n    <>\n      <ReviewHeading>Reviews of the movie:</ReviewHeading>\n      <ReviewContainer>\n        {reviews.length === 0 ? (\n          <div>Sorry, we didn't find any reviews of this movie.</div>\n        ) : (\n          reviews.map(review => (\n            <ReviewItem key={idN}>\n              <ReviewIcon />\n              {<ReviewContainer>{review.content}</ReviewContainer>}\n            </ReviewItem>\n          ))\n        )}\n      </ReviewContainer>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = '713e88f7db14c265e0543f2dd0843d0c';\n\nconst API_ENDPOINTS = {\n  baseURL: 'https://api.themoviedb.org/3/',\n  trending_URL: 'trending/all/day',\n  Movie_URL: 'search/movie',\n  Details_URL: 'movie/{movie_id}',\n  Actors_URL: 'movie/{movie_id}/credits',\n  Reviews_URL: 'movie/{movie_id}/reviews',\n};\n\naxios.defaults.baseURL = API_ENDPOINTS.baseURL;\n\nconst getTrendingMovies = async () => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.trending_URL, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getMovieBySearch = async query => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.Movie_URL, {\n      params: { api_key: API_KEY, language: 'en-US', query: query },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getOneMovie = async id => {\n  try {\n    const result = await axios.get(`movie/${id}`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find any information about this movie :(`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getActors = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/credits`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.cast;\n  } catch (error) {\n    Notify.failure(\n      `Sorry, we can't find information about actors of this movie.`\n    );\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/reviews`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure(`Sorry, no one has written a review yet.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getMoviesAPI = () => {\n  return {\n    getTrendingMovies,\n    getMovieBySearch,\n    getOneMovie,\n    getActors,\n    getReviews,\n  };\n};\n"],"names":["ReviewContainer","styled","ReviewHeading","ReviewItem","ReviewIcon","MdOutlineRateReview","moviesAPI","getMoviesAPI","useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","then","res","length","Notify","idN","nanoid","map","review","content","API_KEY","API_ENDPOINTS","axios","getTrendingMovies","params","api_key","language","result","data","results","Error","response","message","getMovieBySearch","query","getOneMovie","id","getActors","cast"],"sourceRoot":""}