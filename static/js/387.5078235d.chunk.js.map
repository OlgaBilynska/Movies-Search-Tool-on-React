{"version":3,"file":"static/js/387.5078235d.chunk.js","mappings":"mQAEaA,EAAcC,EAAAA,EAAAA,GAAH,gDAIXC,EAAaD,EAAAA,EAAAA,GAAH,8DAKVE,EAAWF,EAAAA,EAAAA,GAAH,2C,SCLfG,GAAWC,EAAAA,EAAAA,KAoCjB,EAlCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,WACYP,EAASQ,UAAUH,GAC3BI,MAAK,SAAAC,GACfN,EAAUM,EACX,GACF,GAAE,CAACL,KAGF,iCACE,SAACT,EAAD,UAAa,2BACb,SAACE,EAAD,UACGK,EAAOQ,KAAI,SAAAC,GACV,IAAMC,GAASC,EAAAA,EAAAA,MACf,OACE,UAACf,EAAD,WACGa,EAAMG,eACL,gBACEC,IAAKJ,EAAMK,KACXC,IAAG,wCAAmCN,EAAMG,iBAGhD,yBAAMH,EAAMK,SAPCJ,EAUlB,QAIR,C,4GCrCKM,EAAU,mCAEVC,EACK,gCADLA,EAEU,mBAFVA,EAGO,eAMbC,EAAAA,EAAAA,SAAAA,QAAyBD,EAEzB,IAAME,EAAiB,mCAAG,6GAEDD,EAAAA,EAAAA,IAAUD,EAA4B,CACzDG,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHlB,cAEhBC,EAFgB,yBAMfA,EAAOC,KAAKC,SANG,sCAQtBC,EAAAA,OAAAA,QAAe,kDACT,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SATd,yDAAH,qDAajBC,EAAgB,mCAAG,WAAMC,GAAN,gGAEAb,EAAAA,EAAAA,IAAUD,EAAyB,CACtDG,OAAQ,CAAEC,QAASL,EAASM,SAAU,QAASS,MAAOA,KAHnC,cAEfR,EAFe,yBAKdA,EAAOC,KAAKC,SALE,sCAOrBC,EAAAA,OAAAA,QAAe,kDACT,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARf,yDAAH,sDAYhBG,EAAW,mCAAG,WAAMC,GAAN,gGAEKf,EAAAA,EAAAA,IAAA,gBAAmBe,GAAM,CAC5Cb,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHxB,cAEVC,EAFU,yBAKTA,EAAOC,MALE,sCAOhBE,EAAAA,OAAAA,QAAA,4DACM,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARpB,yDAAH,sDAYXxB,EAAS,mCAAG,WAAM4B,GAAN,gGAEOf,EAAAA,EAAAA,IAAA,gBAAmBe,EAAnB,YAAiC,CACpDb,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAH1B,cAERC,EAFQ,yBAKPA,EAAOC,KAAKU,MALL,sCAOdR,EAAAA,OAAAA,QAAA,oCACM,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARtB,yDAAH,sDAYTM,EAAU,mCAAG,WAAMF,GAAN,gGAEMf,EAAAA,EAAAA,IAAA,gBAAmBe,EAAnB,YAAiC,CACpDb,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHzB,cAETC,EAFS,yBAKRA,EAAOC,KAAKC,SALJ,sCAOfC,EAAAA,OAAAA,QAAA,2CACM,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARrB,yDAAH,sDAYH/B,EAAe,WAC1B,MAAO,CACLqB,kBAAAA,EACAW,iBAAAA,EACAE,YAAAA,EACA3B,UAAAA,EACA8B,WAAAA,EAEH,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/APIservices.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastHeading = styled.h2`\n  margin-bottom: 30px;\n`;\n\nexport const CastPhotos = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const OnePhoto = styled.li`\n  max-width: 50%;\n`;\n","import { nanoid } from 'nanoid';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMoviesAPI } from 'services/APIservices';\nimport { CastHeading, CastPhotos, OnePhoto } from './Cast.styled';\n\nconst movieAPI = getMoviesAPI();\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const actorsArray = movieAPI.getActors(movieId);\n    actorsArray.then(r => {\n      setActors(r);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      <CastHeading>Actors of the movie: </CastHeading>\n      <CastPhotos>\n        {actors.map(actor => {\n          const nanoId = nanoid();\n          return (\n            <OnePhoto key={nanoId}>\n              {actor.profile_path && (\n                <img\n                  alt={actor.name}\n                  src={`http://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                />\n              )}\n              <div>{actor.name}</div>\n            </OnePhoto>\n          );\n        })}\n      </CastPhotos>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = '713e88f7db14c265e0543f2dd0843d0c';\n\nconst API_ENDPOINTS = {\n  baseURL: 'https://api.themoviedb.org/3/',\n  trending_URL: 'trending/all/day',\n  Movie_URL: 'search/movie',\n  Details_URL: 'movie/{movie_id}',\n  Actors_URL: 'movie/{movie_id}/credits',\n  Reviews_URL: 'movie/{movie_id}/reviews',\n};\n\naxios.defaults.baseURL = API_ENDPOINTS.baseURL;\n\nconst getTrendingMovies = async () => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.trending_URL, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getMovieBySearch = async query => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.Movie_URL, {\n      params: { api_key: API_KEY, language: 'en-US', query: query },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getOneMovie = async id => {\n  try {\n    const result = await axios.get(`movie/${id}`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find any information about this movie :(`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getActors = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/credits`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.cast;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find this actor.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/reviews`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure(`Sorry, no one has written a review yet.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getMoviesAPI = () => {\n  return {\n    getTrendingMovies,\n    getMovieBySearch,\n    getOneMovie,\n    getActors,\n    getReviews,\n  };\n};\n"],"names":["CastHeading","styled","CastPhotos","OnePhoto","movieAPI","getMoviesAPI","useState","actors","setActors","movieId","useParams","useEffect","getActors","then","r","map","actor","nanoId","nanoid","profile_path","alt","name","src","API_KEY","API_ENDPOINTS","axios","getTrendingMovies","params","api_key","language","result","data","results","Notify","Error","response","message","getMovieBySearch","query","getOneMovie","id","cast","getReviews"],"sourceRoot":""}