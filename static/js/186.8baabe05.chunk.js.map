{"version":3,"file":"static/js/186.8baabe05.chunk.js","mappings":"4MAKMA,GAAYC,EAAAA,EAAAA,KA0BlB,UAxBgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRP,EAAUQ,WAAWH,GAASI,MAAK,SAAAC,GACjCN,EAAWM,EACZ,GACF,GAAE,CAACL,IAEJ,IAAMM,GAAMC,EAAAA,EAAAA,MAEZ,OACE,iCACE,yBAAK,0BACJT,EAAQU,KAAI,SAAAC,GAAM,OACjB,yBACE,uBAAIA,EAAOC,WADJJ,EADQ,MAOxB,C,4GC1BKK,EAAU,mCAEVC,EACK,gCADLA,EAEU,mBAFVA,EAGO,eAMbC,EAAAA,EAAAA,SAAAA,QAAyBD,EAEzB,IAAME,EAAiB,mCAAG,6GAEDD,EAAAA,EAAAA,IAAUD,EAA4B,CACzDG,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHlB,cAEhBC,EAFgB,yBAMfA,EAAOC,KAAKC,SANG,sCAQtBC,EAAAA,OAAAA,QAAe,kDACT,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SATd,yDAAH,qDAajBC,EAAgB,mCAAG,WAAMC,GAAN,gGAEAb,EAAAA,EAAAA,IAAUD,EAAyB,CACtDG,OAAQ,CAAEC,QAASL,EAASM,SAAU,QAASS,MAAOA,KAHnC,cAEfR,EAFe,yBAKdA,EAAOC,KAAKC,SALE,sCAOrBC,EAAAA,OAAAA,QAAe,kDACT,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARf,yDAAH,sDAYhBG,EAAW,mCAAG,WAAMC,GAAN,gGAEKf,EAAAA,EAAAA,IAAA,gBAAmBe,GAAM,CAC5Cb,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHxB,cAEVC,EAFU,yBAKTA,EAAOC,MALE,sCAOhBE,EAAAA,OAAAA,QAAA,4DACM,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARpB,yDAAH,sDAYXK,EAAS,mCAAG,WAAMD,GAAN,gGAEOf,EAAAA,EAAAA,IAAA,gBAAmBe,EAAnB,YAAiC,CACpDb,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAH1B,cAERC,EAFQ,yBAKPA,EAAOC,KAAKW,MALL,sCAOdT,EAAAA,OAAAA,QAAA,oCACM,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARtB,yDAAH,sDAYTrB,EAAU,mCAAG,WAAMyB,GAAN,gGAEMf,EAAAA,EAAAA,IAAA,gBAAmBe,EAAnB,YAAiC,CACpDb,OAAQ,CAAEC,QAASL,EAASM,SAAU,WAHzB,cAETC,EAFS,yBAKRA,EAAOC,KAAKC,SALJ,sCAOfC,EAAAA,OAAAA,QAAA,2CACM,IAAIC,MAAM,KAAMC,SAASJ,KAAKK,SARrB,yDAAH,sDAYH5B,EAAe,WAC1B,MAAO,CACLkB,kBAAAA,EACAW,iBAAAA,EACAE,YAAAA,EACAE,UAAAA,EACA1B,WAAAA,EAEH,C","sources":["components/Reviews/Reviews.jsx","services/APIservices.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMoviesAPI } from 'services/APIservices';\n\nconst moviesAPI = getMoviesAPI();\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    moviesAPI.getReviews(movieId).then(res => {\n      setReviews(res);\n    });\n  }, [movieId]);\n\n  const idN = nanoid();\n\n  return (\n    <>\n      <div>Reviews of the movie:</div>\n      {reviews.map(review => (\n        <li key={idN}>\n          <p>{review.content}</p>\n        </li>\n      ))}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = '713e88f7db14c265e0543f2dd0843d0c';\n\nconst API_ENDPOINTS = {\n  baseURL: 'https://api.themoviedb.org/3/',\n  trending_URL: 'trending/all/day',\n  Movie_URL: 'search/movie',\n  Details_URL: 'movie/{movie_id}',\n  Actors_URL: 'movie/{movie_id}/credits',\n  Reviews_URL: 'movie/{movie_id}/reviews',\n};\n\naxios.defaults.baseURL = API_ENDPOINTS.baseURL;\n\nconst getTrendingMovies = async () => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.trending_URL, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getMovieBySearch = async query => {\n  try {\n    const result = await axios.get(API_ENDPOINTS.Movie_URL, {\n      params: { api_key: API_KEY, language: 'en-US', query: query },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure('Sorry, something went wrong. Please try again.');\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getOneMovie = async id => {\n  try {\n    const result = await axios.get(`movie/${id}`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find any information about this movie :(`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getActors = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/credits`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.cast;\n  } catch (error) {\n    Notify.failure(`Sorry, we can't find this actor.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const result = await axios.get(`movie/${id}/reviews`, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data.results;\n  } catch (error) {\n    Notify.failure(`Sorry, no one has written a review yet.`);\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getMoviesAPI = () => {\n  return {\n    getTrendingMovies,\n    getMovieBySearch,\n    getOneMovie,\n    getActors,\n    getReviews,\n  };\n};\n"],"names":["moviesAPI","getMoviesAPI","useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","then","res","idN","nanoid","map","review","content","API_KEY","API_ENDPOINTS","axios","getTrendingMovies","params","api_key","language","result","data","results","Notify","Error","response","message","getMovieBySearch","query","getOneMovie","id","getActors","cast"],"sourceRoot":""}